<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualizador de Música para YouTube</title>
    
    <!-- Tailwind CSS para un diseño moderno y responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- three.js para las visualizaciones 3D -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <style>
        /* Estilo para la fuente y el fondo principal */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #121212;
            color: #E0E0E0;
            overflow: hidden; /* Evita el scroll */
        }
        /* El lienzo de visualización debe cubrir toda la pantalla detrás del contenido */
        #visualizer-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }
        /* Asegura que el contenido de la UI esté sobre el lienzo */
        .ui-content {
            position: relative;
            z-index: 10;
        }
        /* Estilos para los placeholders y el input */
        input::placeholder {
            color: #555;
        }
        /* Oculta el reproductor de YouTube y el elemento de audio de control */
        #player, #audio-control {
            display: none;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center h-screen">

    <!-- Lienzo para la visualización de three.js -->
    <canvas id="visualizer-canvas"></canvas>

    <!-- Contenido de la Interfaz de Usuario -->
    <div class="ui-content text-center p-8 bg-black bg-opacity-50 rounded-xl shadow-lg backdrop-blur-md max-w-xl w-full">
        <h1 class="text-3xl md:text-4xl font-bold mb-2 text-white">Visualizador Musical</h1>
        <p class="text-gray-300 mb-6">Pega una URL de un video o playlist de YouTube para comenzar.</p>
        
        <div class="flex flex-col sm:flex-row gap-3">
            <input type="text" id="youtube-url" placeholder="https://www.youtube.com/watch?v=..." class="flex-grow bg-gray-800 text-white border-2 border-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all">
            <button id="load-btn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition-all transform hover:scale-105">
                Cargar
            </button>
        </div>
        
        <div id="status" class="mt-4 text-gray-400 h-6"></div>

        <!-- Contenedor para el reproductor de YouTube IFrame -->
        <div id="player"></div>
    </div>
    
    <!-- Elemento de audio que realmente reproduce el sonido para el análisis -->
    <audio id="audio-control" crossOrigin="anonymous"></audio>

    <script>
        // --- VARIABLES GLOBALES Y CONFIGURACIÓN ---

        // Elementos de la UI
        const urlInput = document.getElementById('youtube-url');
        const loadButton = document.getElementById('load-btn');
        const statusDiv = document.getElementById('status');
        const audioPlayer = document.getElementById('audio-control');

        // Three.js
        let scene, camera, renderer, particles, analyzer, uniforms;

        // Web Audio API
        let audioContext, audioSource, analyser;
        let dataArray, frequencyArray;
        let isAudioContextInitialized = false;

        // YouTube IFrame API
        let ytPlayer;
        window.onYouTubeIframeAPIReady = function() {
            statusDiv.textContent = 'API de YouTube lista. Ingrese una URL.';
        };
        
        // Carga el script de la API de YouTube
        const tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // --- INICIALIZACIÓN ---

        // Inicializa la escena de Three.js
        function initThree() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 100;

            renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('visualizer-canvas'), antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0); // Fondo transparente

            // Partículas
            const particleCount = 10000;
            const particlesGeometry = new THREE.BufferGeometry();
            const posArray = new Float32Array(particleCount * 3);
            for (let i = 0; i < particleCount * 3; i++) {
                posArray[i] = (Math.random() - 0.5) * 200;
            }
            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
            
            // Shader para controlar las partículas
            uniforms = {
                time: { value: 1.0 },
                bass: { value: 0.0 },
                treble: { value: 0.0 }
            };

            const particleMaterial = new THREE.ShaderMaterial({
                uniforms: uniforms,
                vertexShader: `
                    uniform float time;
                    uniform float bass;
                    uniform float treble;
                    
                    void main() {
                        vec3 pos = position;
                        pos.z += sin(pos.x * 0.1 + time + bass * 2.0) * 10.0;
                        pos.y += cos(pos.z * 0.1 + time) * 5.0;
                        float scale = 0.5 + bass * 1.5;
                        gl_PointSize = scale;
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
                    }
                `,
                fragmentShader: `
                    uniform float bass;
                    uniform float treble;

                    void main() {
                        float dist = distance(gl_PointCoord, vec2(0.5));
                        if (dist > 0.5) discard;
                        
                        vec3 color = vec3(0.8, 0.2, 0.9); // Color base púrpura
                        color.r += treble * 1.5; // Más rojo con los agudos
                        color.b += bass * 0.5; // Más azul con los bajos
                        
                        gl_FragColor = vec4(color, 1.0 - dist * 2.0);
                    }
                `,
                transparent: true,
                blending: THREE.AdditiveBlending,
                depthTest: false
            });


            particles = new THREE.Points(particlesGeometry, particleMaterial);
            scene.add(particles);
            
            window.addEventListener('resize', onWindowResize, false);
        }

        // Inicializa el Contexto de Audio (debe ser activado por una acción del usuario)
        function initAudioContext() {
            if (isAudioContextInitialized) return;
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            analyser.fftSize = 512;
            
            audioSource = audioContext.createMediaElementSource(audioPlayer);
            audioSource.connect(analyser);
            analyser.connect(audioContext.destination);

            dataArray = new Uint8Array(analyser.frequencyBinCount);
            frequencyArray = new Uint8Array(analyser.frequencyBinCount);
            isAudioContextInitialized = true;
            statusDiv.textContent = 'Contexto de audio inicializado.';
        }

        // --- MANEJO DE EVENTOS ---
        
        loadButton.addEventListener('click', () => {
            const url = urlInput.value.trim();
            if (!url) {
                statusDiv.textContent = 'Por favor, introduce una URL de YouTube.';
                return;
            }
            initAudioContext();
            loadYoutubeContent(url);
        });
        
        // Asegurarse de que el contexto de audio se reanude si está suspendido
        document.body.addEventListener('click', () => {
             if (audioContext && audioContext.state === 'suspended') {
                audioContext.resume();
            }
        }, { once: true });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // --- LÓGICA DE YOUTUBE Y AUDIO ---
        
        function loadYoutubeContent(url) {
            statusDiv.textContent = 'Analizando URL...';
            const { videoId, listId } = parseYoutubeUrl(url);

            if (!videoId && !listId) {
                statusDiv.textContent = 'URL de YouTube no válida.';
                return;
            }

            if (ytPlayer) {
                ytPlayer.destroy();
            }
            
            ytPlayer = new YT.Player('player', {
                height: '0',
                width: '0',
                events: {
                    'onReady': (event) => onPlayerReady(event, videoId, listId),
                    'onStateChange': onPlayerStateChange
                }
            });
        }
        
        function onPlayerReady(event, videoId, listId) {
            statusDiv.textContent = 'Reproductor de YouTube listo. Cargando...';
             if (listId) {
                event.target.loadPlaylist({ list: listId, listType: 'playlist' });
            } else if (videoId) {
                event.target.loadVideoById(videoId);
            }
        }

        function onPlayerStateChange(event) {
            if (event.data === YT.PlayerState.PLAYING) {
                statusDiv.textContent = 'Obteniendo stream de audio...';
                const currentVideoUrl = event.target.getVideoUrl();
                const { videoId } = parseYoutubeUrl(currentVideoUrl);
                fetchAudioStream(videoId);
            } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {
                audioPlayer.pause();
                statusDiv.textContent = 'Pausado.';
            }
        }
        
        async function fetchAudioStream(videoId) {
            // Se utiliza una instancia pública de Invidious para obtener el stream de audio.
            // Esto puede ser inestable. En una aplicación de producción, se usaría un backend propio.
            const invidiousApiUrl = `https://invidious.projectsegfau.lt/api/v1/videos/${videoId}`;
            try {
                const response = await fetch(invidiousApiUrl);
                if (!response.ok) throw new Error(`Error de red: ${response.statusText}`);
                const data = await response.json();
                
                // Buscar el mejor formato de solo audio (m4a o webm)
                const audioStream = data.adaptiveFormats.find(f => f.type.startsWith('audio/webm') || f.type.startsWith('audio/mp4'));
                
                if (audioStream) {
                    statusDiv.textContent = `Reproduciendo: ${data.title}`;
                    audioPlayer.src = audioStream.url;
                    audioPlayer.play().catch(e => console.error("Error al reproducir audio:", e));
                } else {
                    throw new Error('No se encontraron streams de solo audio.');
                }
            } catch (error) {
                console.error('Error al obtener el stream de Invidious:', error);
                statusDiv.textContent = 'Error: No se pudo cargar el audio. Prueba otro video.';
            }
        }
        
        function parseYoutubeUrl(url) {
            const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})|list=([^"&?\/\s]+)/;
            const match = url.match(regex);
            return {
                videoId: match ? match[1] : null,
                listId: match ? match[2] : null,
            };
        }

        // --- BUCLE DE ANIMACIÓN Y VISUALIZACIÓN ---

        function animate() {
            requestAnimationFrame(animate);

            if (isAudioContextInitialized && audioPlayer.paused === false) {
                analyser.getByteFrequencyData(frequencyArray);
                
                // Calcular promedios de frecuencias
                const bass = getFrequencyRange(0, 5); // 0-100 Hz
                const mids = getFrequencyRange(50, 150); // 1-3 kHz
                const treble = getFrequencyRange(150, 255); // 3-5 kHz

                // Actualizar uniforms del shader
                uniforms.time.value += 0.01;
                uniforms.bass.value = bass;
                uniforms.treble.value = treble;

                // Rotar las partículas lentamente
                particles.rotation.y += 0.0005;
                particles.rotation.x += 0.0002;
                
                 // Cambiar color de fondo sutilmente
                const bgColor = new THREE.Color().setHSL(0.6 + bass * 0.2, 0.8, 0.05 + bass * 0.1);
                document.body.style.backgroundColor = `#${bgColor.getHexString()}`;
                
            } else {
                 document.body.style.backgroundColor = '#121212';
            }

            renderer.render(scene, camera);
        }
        
        function getFrequencyRange(low, high) {
            let total = 0;
            const count = high - low;
            for (let i = low; i < high; i++) {
                total += frequencyArray[i];
            }
            return (total / count) / 255; // Normalizar
        }


        // --- INICIO ---
        initThree();
        animate();

    </script>
</body>
</html>
